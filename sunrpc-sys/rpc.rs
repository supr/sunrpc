/* automatically generated by rust-bindgen */

pub type bool_t = ::libc::c_int;
pub type enum_t = ::libc::c_int;
pub type rpcprog_t = ::libc::c_ulong;
pub type rpcvers_t = ::libc::c_ulong;
pub type rpcproc_t = ::libc::c_ulong;
pub type rpcprot_t = ::libc::c_ulong;
pub type rpcport_t = ::libc::c_ulong;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2us],
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Struct_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed2 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed3 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Union_wait { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Struct_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Struct_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 1us],
}
impl Union_Unnamed4 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Union_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Struct_Unnamed5 { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Struct_Unnamed6 { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Struct_Unnamed7 { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed7;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub __val: [::libc::c_ulong; 16us],
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Struct_Unnamed8 { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed8;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Struct_timespec { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Struct_timeval { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub __fds_bits: [__fd_mask; 16us],
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Struct_Unnamed9 { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed9;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7us],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Union_pthread_attr_t { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Struct___pthread_internal_list {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u64; 5us],
}
impl Union_Unnamed10 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Union_Unnamed10 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Struct___pthread_mutex_s {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_mutex_t = Union_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed11 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Union_Unnamed11 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed11;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u64; 6us],
}
impl Union_Unnamed12 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed13 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Union_Unnamed12 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Struct_Unnamed13 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed14 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed14 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed14 {
    fn default() -> Union_Unnamed14 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed14;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed15 {
    pub _bindgen_data_: [u64; 7us],
}
impl Union_Unnamed15 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed16 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed15 {
    fn default() -> Union_Unnamed15 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __rwelision: ::libc::c_char,
    pub __pad1: [::libc::c_uchar; 7us],
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Struct_Unnamed16 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed17 {
    pub _bindgen_data_: [u64; 1us],
}
impl Union_Unnamed17 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed17 {
    fn default() -> Union_Unnamed17 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed17;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed18 {
    pub _bindgen_data_: [u64; 4us],
}
impl Union_Unnamed18 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed18 {
    fn default() -> Union_Unnamed18 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed18;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed19 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed19 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed19 {
    fn default() -> Union_Unnamed19 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::libc::c_int,
    pub rand_deg: ::libc::c_int,
    pub rand_sep: ::libc::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Struct_random_data { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_drand48_data {
    pub __x: [::libc::c_ushort; 3us],
    pub __old_x: [::libc::c_ushort; 3us],
    pub __c: ::libc::c_ushort,
    pub __init: ::libc::c_ushort,
    pub __a: ::libc::c_ulonglong,
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Struct_drand48_data { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_void,
                               arg2: *const ::libc::c_void) -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timezone {
    pub tz_minuteswest: ::libc::c_int,
    pub tz_dsttime: ::libc::c_int,
}
impl ::std::default::Default for Struct_timezone {
    fn default() -> Struct_timezone { unsafe { ::std::mem::zeroed() } }
}
pub type __timezone_ptr_t = *mut Struct_timezone;
pub type Enum___itimer_which = ::libc::c_uint;
pub const ITIMER_REAL: ::libc::c_uint = 0;
pub const ITIMER_VIRTUAL: ::libc::c_uint = 1;
pub const ITIMER_PROF: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerval {
    pub it_interval: Struct_timeval,
    pub it_value: Struct_timeval,
}
impl ::std::default::Default for Struct_itimerval {
    fn default() -> Struct_itimerval { unsafe { ::std::mem::zeroed() } }
}
pub type __itimer_which_t = ::libc::c_int;
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1us],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Union_sigval { unsafe { ::std::mem::zeroed() } }
}
pub type sigval_t = Union_sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub _sifields: Union_Unnamed21,
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Struct_Unnamed20 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed21 {
    pub _bindgen_data_: [u64; 14us],
}
impl Union_Unnamed21 {
    pub unsafe fn _pad(&mut self) -> *mut [::libc::c_int; 28us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _kill(&mut self) -> *mut Struct_Unnamed22 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _timer(&mut self) -> *mut Struct_Unnamed23 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _rt(&mut self) -> *mut Struct_Unnamed24 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _sigchld(&mut self) -> *mut Struct_Unnamed25 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _sigfault(&mut self) -> *mut Struct_Unnamed26 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _sigpoll(&mut self) -> *mut Struct_Unnamed27 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _sigsys(&mut self) -> *mut Struct_Unnamed28 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed21 {
    fn default() -> Union_Unnamed21 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Struct_Unnamed22 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub si_tid: ::libc::c_int,
    pub si_overrun: ::libc::c_int,
    pub si_sigval: sigval_t,
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Struct_Unnamed23 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Struct_Unnamed24 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::libc::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Struct_Unnamed25 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed26 {
    pub si_addr: *mut ::libc::c_void,
    pub si_addr_lsb: ::libc::c_short,
}
impl ::std::default::Default for Struct_Unnamed26 {
    fn default() -> Struct_Unnamed26 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub si_band: ::libc::c_long,
    pub si_fd: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Struct_Unnamed27 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub _call_addr: *mut ::libc::c_void,
    pub _syscall: ::libc::c_int,
    pub _arch: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Struct_Unnamed28 { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct_Unnamed20;
pub type Enum_Unnamed29 = ::libc::c_int;
pub const SI_ASYNCNL: ::libc::c_int = -60;
pub const SI_TKILL: ::libc::c_int = -6;
pub const SI_SIGIO: ::libc::c_int = -5;
pub const SI_ASYNCIO: ::libc::c_int = -4;
pub const SI_MESGQ: ::libc::c_int = -3;
pub const SI_TIMER: ::libc::c_int = -2;
pub const SI_QUEUE: ::libc::c_int = -1;
pub const SI_USER: ::libc::c_int = 0;
pub const SI_KERNEL: ::libc::c_int = 128;
pub type Enum_Unnamed30 = ::libc::c_uint;
pub const ILL_ILLOPC: ::libc::c_uint = 1;
pub const ILL_ILLOPN: ::libc::c_uint = 2;
pub const ILL_ILLADR: ::libc::c_uint = 3;
pub const ILL_ILLTRP: ::libc::c_uint = 4;
pub const ILL_PRVOPC: ::libc::c_uint = 5;
pub const ILL_PRVREG: ::libc::c_uint = 6;
pub const ILL_COPROC: ::libc::c_uint = 7;
pub const ILL_BADSTK: ::libc::c_uint = 8;
pub type Enum_Unnamed31 = ::libc::c_uint;
pub const FPE_INTDIV: ::libc::c_uint = 1;
pub const FPE_INTOVF: ::libc::c_uint = 2;
pub const FPE_FLTDIV: ::libc::c_uint = 3;
pub const FPE_FLTOVF: ::libc::c_uint = 4;
pub const FPE_FLTUND: ::libc::c_uint = 5;
pub const FPE_FLTRES: ::libc::c_uint = 6;
pub const FPE_FLTINV: ::libc::c_uint = 7;
pub const FPE_FLTSUB: ::libc::c_uint = 8;
pub type Enum_Unnamed32 = ::libc::c_uint;
pub const SEGV_MAPERR: ::libc::c_uint = 1;
pub const SEGV_ACCERR: ::libc::c_uint = 2;
pub type Enum_Unnamed33 = ::libc::c_uint;
pub const BUS_ADRALN: ::libc::c_uint = 1;
pub const BUS_ADRERR: ::libc::c_uint = 2;
pub const BUS_OBJERR: ::libc::c_uint = 3;
pub const BUS_MCEERR_AR: ::libc::c_uint = 4;
pub const BUS_MCEERR_AO: ::libc::c_uint = 5;
pub type Enum_Unnamed34 = ::libc::c_uint;
pub const CLD_EXITED: ::libc::c_uint = 1;
pub const CLD_KILLED: ::libc::c_uint = 2;
pub const CLD_DUMPED: ::libc::c_uint = 3;
pub const CLD_TRAPPED: ::libc::c_uint = 4;
pub const CLD_STOPPED: ::libc::c_uint = 5;
pub const CLD_CONTINUED: ::libc::c_uint = 6;
pub type Enum_Unnamed35 = ::libc::c_uint;
pub const POLL_IN: ::libc::c_uint = 1;
pub const POLL_OUT: ::libc::c_uint = 2;
pub const POLL_MSG: ::libc::c_uint = 3;
pub const POLL_ERR: ::libc::c_uint = 4;
pub const POLL_PRI: ::libc::c_uint = 5;
pub const POLL_HUP: ::libc::c_uint = 6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::libc::c_int,
    pub sigev_notify: ::libc::c_int,
    pub _sigev_un: Union_Unnamed36,
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Struct_sigevent { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed36 {
    pub _bindgen_data_: [u64; 6us],
}
impl Union_Unnamed36 {
    pub unsafe fn _pad(&mut self) -> *mut [::libc::c_int; 12us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _tid(&mut self) -> *mut __pid_t {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _sigev_thread(&mut self) -> *mut Struct_Unnamed37 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed36 {
    fn default() -> Union_Unnamed36 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed37 {
    pub _function: ::std::option::Option<extern "C" fn(arg1: sigval_t) -> ()>,
    pub _attribute: *mut pthread_attr_t,
}
impl ::std::default::Default for Struct_Unnamed37 {
    fn default() -> Struct_Unnamed37 { unsafe { ::std::mem::zeroed() } }
}
pub type sigevent_t = Struct_sigevent;
pub type Enum_Unnamed38 = ::libc::c_uint;
pub const SIGEV_SIGNAL: ::libc::c_uint = 0;
pub const SIGEV_NONE: ::libc::c_uint = 1;
pub const SIGEV_THREAD: ::libc::c_uint = 2;
pub const SIGEV_THREAD_ID: ::libc::c_uint = 4;
pub type __sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
pub type sig_t = __sighandler_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_handler: Union_Unnamed39,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::libc::c_int,
    pub sa_restorer: ::std::option::Option<extern "C" fn() -> ()>,
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Struct_sigaction { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed39 {
    pub _bindgen_data_: [u64; 1us],
}
impl Union_Unnamed39 {
    pub unsafe fn sa_handler(&mut self) -> *mut __sighandler_t {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn
                                        (arg1: ::libc::c_int,
                                         arg2: *mut siginfo_t,
                                         arg3: *mut ::libc::c_void) -> ()> {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed39 {
    fn default() -> Union_Unnamed39 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: __sighandler_t,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Struct_sigvec { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7us],
}
impl ::std::default::Default for Struct__fpx_sw_bytes {
    fn default() -> Struct__fpx_sw_bytes { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpreg {
    pub significand: [::libc::c_ushort; 4us],
    pub exponent: ::libc::c_ushort,
}
impl ::std::default::Default for Struct__fpreg {
    fn default() -> Struct__fpreg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpxreg {
    pub significand: [::libc::c_ushort; 4us],
    pub exponent: ::libc::c_ushort,
    pub padding: [::libc::c_ushort; 3us],
}
impl ::std::default::Default for Struct__fpxreg {
    fn default() -> Struct__fpxreg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xmmreg {
    pub element: [__uint32_t; 4us],
}
impl ::std::default::Default for Struct__xmmreg {
    fn default() -> Struct__xmmreg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__fpxreg; 8us],
    pub _xmm: [Struct__xmmreg; 16us],
    pub padding: [__uint32_t; 24us],
}
impl ::std::default::Default for Struct__fpstate {
    fn default() -> Struct__fpstate { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::libc::c_ushort,
    pub gs: ::libc::c_ushort,
    pub fs: ::libc::c_ushort,
    pub __pad0: ::libc::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub _bindgen_data_1_: [u64; 1us],
    pub __reserved1: [__uint64_t; 8us],
}
impl Struct_sigcontext {
    pub unsafe fn fpstate(&mut self) -> *mut *mut Struct__fpstate {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn __fpstate_word(&mut self) -> *mut __uint64_t {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_sigcontext {
    fn default() -> Struct_sigcontext { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2us],
    pub reserved2: [__uint64_t; 5us],
}
impl ::std::default::Default for Struct__xsave_hdr {
    fn default() -> Struct__xsave_hdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ymmh_state {
    pub ymmh_space: [__uint32_t; 64us],
}
impl ::std::default::Default for Struct__ymmh_state {
    fn default() -> Struct__ymmh_state { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xstate {
    pub fpstate: Struct__fpstate,
    pub xstate_hdr: Struct__xsave_hdr,
    pub ymmh: Struct__ymmh_state,
}
impl ::std::default::Default for Struct__xstate {
    fn default() -> Struct__xstate { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_onstack: ::libc::c_int,
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Struct_sigstack { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed40 = ::libc::c_uint;
pub const SS_ONSTACK: ::libc::c_uint = 1;
pub const SS_DISABLE: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_flags: ::libc::c_int,
    pub ss_size: size_t,
}
impl ::std::default::Default for Struct_sigaltstack {
    fn default() -> Struct_sigaltstack { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct_sigaltstack;
pub type greg_t = ::libc::c_longlong;
pub type gregset_t = [greg_t; 23us];
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_fpxreg {
    pub significand: [::libc::c_ushort; 4us],
    pub exponent: ::libc::c_ushort,
    pub padding: [::libc::c_ushort; 3us],
}
impl ::std::default::Default for Struct__libc_fpxreg {
    fn default() -> Struct__libc_fpxreg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_xmmreg {
    pub element: [__uint32_t; 4us],
}
impl ::std::default::Default for Struct__libc_xmmreg {
    fn default() -> Struct__libc_xmmreg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__libc_fpxreg; 8us],
    pub _xmm: [Struct__libc_xmmreg; 16us],
    pub padding: [__uint32_t; 24us],
}
impl ::std::default::Default for Struct__libc_fpstate {
    fn default() -> Struct__libc_fpstate { unsafe { ::std::mem::zeroed() } }
}
pub type fpregset_t = *mut Struct__libc_fpstate;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed41 {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::libc::c_ulonglong; 8us],
}
impl ::std::default::Default for Struct_Unnamed41 {
    fn default() -> Struct_Unnamed41 { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = Struct_Unnamed41;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ucontext {
    pub uc_flags: ::libc::c_ulong,
    pub uc_link: *mut Struct_ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: Struct__libc_fpstate,
}
impl ::std::default::Default for Struct_ucontext {
    fn default() -> Struct_ucontext { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct_ucontext;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_iovec {
    pub iov_base: *mut ::libc::c_void,
    pub iov_len: size_t,
}
impl ::std::default::Default for Struct_iovec {
    fn default() -> Struct_iovec { unsafe { ::std::mem::zeroed() } }
}
pub type socklen_t = __socklen_t;
pub type Enum___socket_type = ::libc::c_uint;
pub const SOCK_STREAM: ::libc::c_uint = 1;
pub const SOCK_DGRAM: ::libc::c_uint = 2;
pub const SOCK_RAW: ::libc::c_uint = 3;
pub const SOCK_RDM: ::libc::c_uint = 4;
pub const SOCK_SEQPACKET: ::libc::c_uint = 5;
pub const SOCK_DCCP: ::libc::c_uint = 6;
pub const SOCK_PACKET: ::libc::c_uint = 10;
pub const SOCK_CLOEXEC: ::libc::c_uint = 524288;
pub const SOCK_NONBLOCK: ::libc::c_uint = 2048;
pub type sa_family_t = ::libc::c_ushort;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::libc::c_char; 14us],
}
impl ::std::default::Default for Struct_sockaddr {
    fn default() -> Struct_sockaddr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_align: ::libc::c_ulong,
    pub __ss_padding: [::libc::c_char; 112us],
}
impl ::std::default::Default for Struct_sockaddr_storage {
    fn default() -> Struct_sockaddr_storage {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_Unnamed42 = ::libc::c_uint;
pub const MSG_OOB: ::libc::c_uint = 1;
pub const MSG_PEEK: ::libc::c_uint = 2;
pub const MSG_DONTROUTE: ::libc::c_uint = 4;
pub const MSG_CTRUNC: ::libc::c_uint = 8;
pub const MSG_PROXY: ::libc::c_uint = 16;
pub const MSG_TRUNC: ::libc::c_uint = 32;
pub const MSG_DONTWAIT: ::libc::c_uint = 64;
pub const MSG_EOR: ::libc::c_uint = 128;
pub const MSG_WAITALL: ::libc::c_uint = 256;
pub const MSG_FIN: ::libc::c_uint = 512;
pub const MSG_SYN: ::libc::c_uint = 1024;
pub const MSG_CONFIRM: ::libc::c_uint = 2048;
pub const MSG_RST: ::libc::c_uint = 4096;
pub const MSG_ERRQUEUE: ::libc::c_uint = 8192;
pub const MSG_NOSIGNAL: ::libc::c_uint = 16384;
pub const MSG_MORE: ::libc::c_uint = 32768;
pub const MSG_WAITFORONE: ::libc::c_uint = 65536;
pub const MSG_FASTOPEN: ::libc::c_uint = 536870912;
pub const MSG_CMSG_CLOEXEC: ::libc::c_uint = 1073741824;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_msghdr {
    pub msg_name: *mut ::libc::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut Struct_iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::libc::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::libc::c_int,
}
impl ::std::default::Default for Struct_msghdr {
    fn default() -> Struct_msghdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::libc::c_int,
    pub cmsg_type: ::libc::c_int,
    pub __cmsg_data: *mut ::libc::c_uchar,
}
impl ::std::default::Default for Struct_cmsghdr {
    fn default() -> Struct_cmsghdr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed43 = ::libc::c_uint;
pub const SCM_RIGHTS: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_linger {
    pub l_onoff: ::libc::c_int,
    pub l_linger: ::libc::c_int,
}
impl ::std::default::Default for Struct_linger {
    fn default() -> Struct_linger { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_osockaddr {
    pub sa_family: ::libc::c_ushort,
    pub sa_data: [::libc::c_uchar; 14us],
}
impl ::std::default::Default for Struct_osockaddr {
    fn default() -> Struct_osockaddr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed44 = ::libc::c_uint;
pub const SHUT_RD: ::libc::c_uint = 0;
pub const SHUT_WR: ::libc::c_uint = 1;
pub const SHUT_RDWR: ::libc::c_uint = 2;
pub type in_addr_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in_addr {
    pub s_addr: in_addr_t,
}
impl ::std::default::Default for Struct_in_addr {
    fn default() -> Struct_in_addr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_opts {
    pub ip_dst: Struct_in_addr,
    pub ip_opts: [::libc::c_char; 40us],
}
impl ::std::default::Default for Struct_ip_opts {
    fn default() -> Struct_ip_opts { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreqn {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_address: Struct_in_addr,
    pub imr_ifindex: ::libc::c_int,
}
impl ::std::default::Default for Struct_ip_mreqn {
    fn default() -> Struct_ip_mreqn { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in_pktinfo {
    pub ipi_ifindex: ::libc::c_int,
    pub ipi_spec_dst: Struct_in_addr,
    pub ipi_addr: Struct_in_addr,
}
impl ::std::default::Default for Struct_in_pktinfo {
    fn default() -> Struct_in_pktinfo { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed45 = ::libc::c_uint;
pub const IPPROTO_IP: ::libc::c_uint = 0;
pub const IPPROTO_ICMP: ::libc::c_uint = 1;
pub const IPPROTO_IGMP: ::libc::c_uint = 2;
pub const IPPROTO_IPIP: ::libc::c_uint = 4;
pub const IPPROTO_TCP: ::libc::c_uint = 6;
pub const IPPROTO_EGP: ::libc::c_uint = 8;
pub const IPPROTO_PUP: ::libc::c_uint = 12;
pub const IPPROTO_UDP: ::libc::c_uint = 17;
pub const IPPROTO_IDP: ::libc::c_uint = 22;
pub const IPPROTO_TP: ::libc::c_uint = 29;
pub const IPPROTO_DCCP: ::libc::c_uint = 33;
pub const IPPROTO_IPV6: ::libc::c_uint = 41;
pub const IPPROTO_RSVP: ::libc::c_uint = 46;
pub const IPPROTO_GRE: ::libc::c_uint = 47;
pub const IPPROTO_ESP: ::libc::c_uint = 50;
pub const IPPROTO_AH: ::libc::c_uint = 51;
pub const IPPROTO_MTP: ::libc::c_uint = 92;
pub const IPPROTO_BEETPH: ::libc::c_uint = 94;
pub const IPPROTO_ENCAP: ::libc::c_uint = 98;
pub const IPPROTO_PIM: ::libc::c_uint = 103;
pub const IPPROTO_COMP: ::libc::c_uint = 108;
pub const IPPROTO_SCTP: ::libc::c_uint = 132;
pub const IPPROTO_UDPLITE: ::libc::c_uint = 136;
pub const IPPROTO_RAW: ::libc::c_uint = 255;
pub const IPPROTO_MAX: ::libc::c_uint = 256;
pub type Enum_Unnamed46 = ::libc::c_uint;
pub const IPPROTO_HOPOPTS: ::libc::c_uint = 0;
pub const IPPROTO_ROUTING: ::libc::c_uint = 43;
pub const IPPROTO_FRAGMENT: ::libc::c_uint = 44;
pub const IPPROTO_ICMPV6: ::libc::c_uint = 58;
pub const IPPROTO_NONE: ::libc::c_uint = 59;
pub const IPPROTO_DSTOPTS: ::libc::c_uint = 60;
pub const IPPROTO_MH: ::libc::c_uint = 135;
pub type in_port_t = uint16_t;
pub type Enum_Unnamed47 = ::libc::c_uint;
pub const IPPORT_ECHO: ::libc::c_uint = 7;
pub const IPPORT_DISCARD: ::libc::c_uint = 9;
pub const IPPORT_SYSTAT: ::libc::c_uint = 11;
pub const IPPORT_DAYTIME: ::libc::c_uint = 13;
pub const IPPORT_NETSTAT: ::libc::c_uint = 15;
pub const IPPORT_FTP: ::libc::c_uint = 21;
pub const IPPORT_TELNET: ::libc::c_uint = 23;
pub const IPPORT_SMTP: ::libc::c_uint = 25;
pub const IPPORT_TIMESERVER: ::libc::c_uint = 37;
pub const IPPORT_NAMESERVER: ::libc::c_uint = 42;
pub const IPPORT_WHOIS: ::libc::c_uint = 43;
pub const IPPORT_MTP: ::libc::c_uint = 57;
pub const IPPORT_TFTP: ::libc::c_uint = 69;
pub const IPPORT_RJE: ::libc::c_uint = 77;
pub const IPPORT_FINGER: ::libc::c_uint = 79;
pub const IPPORT_TTYLINK: ::libc::c_uint = 87;
pub const IPPORT_SUPDUP: ::libc::c_uint = 95;
pub const IPPORT_EXECSERVER: ::libc::c_uint = 512;
pub const IPPORT_LOGINSERVER: ::libc::c_uint = 513;
pub const IPPORT_CMDSERVER: ::libc::c_uint = 514;
pub const IPPORT_EFSSERVER: ::libc::c_uint = 520;
pub const IPPORT_BIFFUDP: ::libc::c_uint = 512;
pub const IPPORT_WHOSERVER: ::libc::c_uint = 513;
pub const IPPORT_ROUTESERVER: ::libc::c_uint = 520;
pub const IPPORT_RESERVED: ::libc::c_uint = 1024;
pub const IPPORT_USERRESERVED: ::libc::c_uint = 5000;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in6_addr {
    pub __in6_u: Union_Unnamed48,
}
impl ::std::default::Default for Struct_in6_addr {
    fn default() -> Struct_in6_addr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed48 {
    pub _bindgen_data_: [u32; 4us],
}
impl Union_Unnamed48 {
    pub unsafe fn __u6_addr8(&mut self) -> *mut [uint8_t; 16us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __u6_addr16(&mut self) -> *mut [uint16_t; 8us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __u6_addr32(&mut self) -> *mut [uint32_t; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed48 {
    fn default() -> Union_Unnamed48 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: Struct_in_addr,
    pub sin_zero: [::libc::c_uchar; 8us],
}
impl ::std::default::Default for Struct_sockaddr_in {
    fn default() -> Struct_sockaddr_in { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: uint32_t,
    pub sin6_addr: Struct_in6_addr,
    pub sin6_scope_id: uint32_t,
}
impl ::std::default::Default for Struct_sockaddr_in6 {
    fn default() -> Struct_sockaddr_in6 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreq {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
}
impl ::std::default::Default for Struct_ip_mreq {
    fn default() -> Struct_ip_mreq { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreq_source {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
    pub imr_sourceaddr: Struct_in_addr,
}
impl ::std::default::Default for Struct_ip_mreq_source {
    fn default() -> Struct_ip_mreq_source { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipv6_mreq {
    pub ipv6mr_multiaddr: Struct_in6_addr,
    pub ipv6mr_interface: ::libc::c_uint,
}
impl ::std::default::Default for Struct_ipv6_mreq {
    fn default() -> Struct_ipv6_mreq { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_req {
    pub gr_interface: uint32_t,
    pub gr_group: Struct_sockaddr_storage,
}
impl ::std::default::Default for Struct_group_req {
    fn default() -> Struct_group_req { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_source_req {
    pub gsr_interface: uint32_t,
    pub gsr_group: Struct_sockaddr_storage,
    pub gsr_source: Struct_sockaddr_storage,
}
impl ::std::default::Default for Struct_group_source_req {
    fn default() -> Struct_group_source_req {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_msfilter {
    pub imsf_multiaddr: Struct_in_addr,
    pub imsf_interface: Struct_in_addr,
    pub imsf_fmode: uint32_t,
    pub imsf_numsrc: uint32_t,
    pub imsf_slist: [Struct_in_addr; 1us],
}
impl ::std::default::Default for Struct_ip_msfilter {
    fn default() -> Struct_ip_msfilter { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_filter {
    pub gf_interface: uint32_t,
    pub gf_group: Struct_sockaddr_storage,
    pub gf_fmode: uint32_t,
    pub gf_numsrc: uint32_t,
    pub gf_slist: [Struct_sockaddr_storage; 1us],
}
impl ::std::default::Default for Struct_group_filter {
    fn default() -> Struct_group_filter { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed49 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed50,
}
impl ::std::default::Default for Struct_Unnamed49 {
    fn default() -> Struct_Unnamed49 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed50 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed50 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed50 {
    fn default() -> Union_Unnamed50 { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed49;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed51 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed51 {
    fn default() -> Struct_Unnamed51 { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed51;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed52 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed52 {
    fn default() -> Struct_Unnamed52 { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed52;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Struct__IO_marker { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1us],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20us],
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Struct__IO_FILE { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn
        (__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
         __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn
        (__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
         __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn
        (__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
         __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type va_list = __gnuc_va_list;
pub type fpos_t = _G_fpos_t;
pub type Enum_xdr_op = ::libc::c_uint;
pub const XDR_ENCODE: ::libc::c_uint = 0;
pub const XDR_DECODE: ::libc::c_uint = 1;
pub const XDR_FREE: ::libc::c_uint = 2;
pub type XDR = Struct_XDR;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_XDR {
    pub x_op: Enum_xdr_op,
    pub x_ops: *mut Struct_xdr_ops,
    pub x_public: caddr_t,
    pub x_private: caddr_t,
    pub x_base: caddr_t,
    pub x_handy: u_int,
}
impl ::std::default::Default for Struct_XDR {
    fn default() -> Struct_XDR { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xdr_ops {
    pub x_getlong: ::std::option::Option<extern "C" fn
                                             (__xdrs: *mut XDR,
                                              __lp: *mut ::libc::c_long)
                                             -> bool_t>,
    pub x_putlong: ::std::option::Option<extern "C" fn
                                             (__xdrs: *mut XDR,
                                              __lp: *const ::libc::c_long)
                                             -> bool_t>,
    pub x_getbytes: ::std::option::Option<extern "C" fn
                                              (__xdrs: *mut XDR,
                                               __addr: caddr_t, __len: u_int)
                                              -> bool_t>,
    pub x_putbytes: ::std::option::Option<extern "C" fn
                                              (__xdrs: *mut XDR,
                                               __addr: *const ::libc::c_char,
                                               __len: u_int) -> bool_t>,
    pub x_getpostn: ::std::option::Option<extern "C" fn(__xdrs: *const XDR)
                                              -> u_int>,
    pub x_setpostn: ::std::option::Option<extern "C" fn
                                              (__xdrs: *mut XDR, __pos: u_int)
                                              -> bool_t>,
    pub x_inline: ::std::option::Option<extern "C" fn
                                            (__xdrs: *mut XDR, __len: u_int)
                                            -> *mut int32_t>,
    pub x_destroy: ::std::option::Option<extern "C" fn(__xdrs: *mut XDR)
                                             -> ()>,
    pub x_getint32: ::std::option::Option<extern "C" fn
                                              (__xdrs: *mut XDR,
                                               __ip: *mut int32_t) -> bool_t>,
    pub x_putint32: ::std::option::Option<extern "C" fn
                                              (__xdrs: *mut XDR,
                                               __ip: *const int32_t)
                                              -> bool_t>,
}
impl ::std::default::Default for Struct_xdr_ops {
    fn default() -> Struct_xdr_ops { unsafe { ::std::mem::zeroed() } }
}
pub type xdrproc_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut XDR, arg2: *mut ::libc::c_void, ...)
                              -> bool_t>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xdr_discrim {
    pub value: ::libc::c_int,
    pub _proc: xdrproc_t,
}
impl ::std::default::Default for Struct_xdr_discrim {
    fn default() -> Struct_xdr_discrim { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netobj {
    pub n_len: u_int,
    pub n_bytes: *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_netobj {
    fn default() -> Struct_netobj { unsafe { ::std::mem::zeroed() } }
}
pub type netobj = Struct_netobj;
pub type Enum_auth_stat = ::libc::c_uint;
pub const AUTH_OK: ::libc::c_uint = 0;
pub const AUTH_BADCRED: ::libc::c_uint = 1;
pub const AUTH_REJECTEDCRED: ::libc::c_uint = 2;
pub const AUTH_BADVERF: ::libc::c_uint = 3;
pub const AUTH_REJECTEDVERF: ::libc::c_uint = 4;
pub const AUTH_TOOWEAK: ::libc::c_uint = 5;
pub const AUTH_INVALIDRESP: ::libc::c_uint = 6;
pub const AUTH_FAILED: ::libc::c_uint = 7;
#[repr(C)]
#[derive(Copy)]
pub struct Union_des_block {
    pub _bindgen_data_: [u32; 2us],
}
impl Union_des_block {
    pub unsafe fn key(&mut self) -> *mut Struct_Unnamed53 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn c(&mut self) -> *mut [::libc::c_char; 8us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_des_block {
    fn default() -> Union_des_block { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed53 {
    pub high: u_int32_t,
    pub low: u_int32_t,
}
impl ::std::default::Default for Struct_Unnamed53 {
    fn default() -> Struct_Unnamed53 { unsafe { ::std::mem::zeroed() } }
}
pub type des_block = Union_des_block;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_opaque_auth {
    pub oa_flavor: enum_t,
    pub oa_base: caddr_t,
    pub oa_length: u_int,
}
impl ::std::default::Default for Struct_opaque_auth {
    fn default() -> Struct_opaque_auth { unsafe { ::std::mem::zeroed() } }
}
pub type AUTH = Struct_AUTH;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_AUTH {
    pub ah_cred: Struct_opaque_auth,
    pub ah_verf: Struct_opaque_auth,
    pub ah_key: Union_des_block,
    pub ah_ops: *mut Struct_auth_ops,
    pub ah_private: caddr_t,
}
impl ::std::default::Default for Struct_AUTH {
    fn default() -> Struct_AUTH { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_auth_ops {
    pub ah_nextverf: ::std::option::Option<extern "C" fn(arg1: *mut AUTH)
                                               -> ()>,
    pub ah_marshal: ::std::option::Option<extern "C" fn
                                              (arg1: *mut AUTH,
                                               arg2: *mut XDR)
                                              -> ::libc::c_int>,
    pub ah_validate: ::std::option::Option<extern "C" fn
                                               (arg1: *mut AUTH,
                                                arg2: *mut Struct_opaque_auth)
                                               -> ::libc::c_int>,
    pub ah_refresh: ::std::option::Option<extern "C" fn(arg1: *mut AUTH)
                                              -> ::libc::c_int>,
    pub ah_destroy: ::std::option::Option<extern "C" fn(arg1: *mut AUTH)
                                              -> ()>,
}
impl ::std::default::Default for Struct_auth_ops {
    fn default() -> Struct_auth_ops { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_un {
    pub sun_family: sa_family_t,
    pub sun_path: [::libc::c_char; 108us],
}
impl ::std::default::Default for Struct_sockaddr_un {
    fn default() -> Struct_sockaddr_un { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13us],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13us],
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Struct___locale_struct { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type Enum_clnt_stat = ::libc::c_uint;
pub const RPC_SUCCESS: ::libc::c_uint = 0;
pub const RPC_CANTENCODEARGS: ::libc::c_uint = 1;
pub const RPC_CANTDECODERES: ::libc::c_uint = 2;
pub const RPC_CANTSEND: ::libc::c_uint = 3;
pub const RPC_CANTRECV: ::libc::c_uint = 4;
pub const RPC_TIMEDOUT: ::libc::c_uint = 5;
pub const RPC_VERSMISMATCH: ::libc::c_uint = 6;
pub const RPC_AUTHERROR: ::libc::c_uint = 7;
pub const RPC_PROGUNAVAIL: ::libc::c_uint = 8;
pub const RPC_PROGVERSMISMATCH: ::libc::c_uint = 9;
pub const RPC_PROCUNAVAIL: ::libc::c_uint = 10;
pub const RPC_CANTDECODEARGS: ::libc::c_uint = 11;
pub const RPC_SYSTEMERROR: ::libc::c_uint = 12;
pub const RPC_NOBROADCAST: ::libc::c_uint = 21;
pub const RPC_UNKNOWNHOST: ::libc::c_uint = 13;
pub const RPC_UNKNOWNPROTO: ::libc::c_uint = 17;
pub const RPC_UNKNOWNADDR: ::libc::c_uint = 19;
pub const RPC_RPCBFAILURE: ::libc::c_uint = 14;
pub const RPC_PROGNOTREGISTERED: ::libc::c_uint = 15;
pub const RPC_N2AXLATEFAILURE: ::libc::c_uint = 22;
pub const RPC_FAILED: ::libc::c_uint = 16;
pub const RPC_INTR: ::libc::c_uint = 18;
pub const RPC_TLIERROR: ::libc::c_uint = 20;
pub const RPC_UDERROR: ::libc::c_uint = 23;
pub const RPC_INPROGRESS: ::libc::c_uint = 24;
pub const RPC_STALERACHANDLE: ::libc::c_uint = 25;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpc_err {
    pub re_status: Enum_clnt_stat,
    pub ru: Union_Unnamed54,
}
impl ::std::default::Default for Struct_rpc_err {
    fn default() -> Struct_rpc_err { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed54 {
    pub _bindgen_data_: [u64; 2us],
}
impl Union_Unnamed54 {
    pub unsafe fn RE_errno(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn RE_why(&mut self) -> *mut Enum_auth_stat {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn RE_vers(&mut self) -> *mut Struct_Unnamed55 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn RE_lb(&mut self) -> *mut Struct_Unnamed56 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed54 {
    fn default() -> Union_Unnamed54 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed55 {
    pub low: u_long,
    pub high: u_long,
}
impl ::std::default::Default for Struct_Unnamed55 {
    fn default() -> Struct_Unnamed55 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed56 {
    pub s1: ::libc::c_long,
    pub s2: ::libc::c_long,
}
impl ::std::default::Default for Struct_Unnamed56 {
    fn default() -> Struct_Unnamed56 { unsafe { ::std::mem::zeroed() } }
}
pub type CLIENT = Struct_CLIENT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_CLIENT {
    pub cl_auth: *mut AUTH,
    pub cl_ops: *mut Struct_clnt_ops,
    pub cl_private: caddr_t,
}
impl ::std::default::Default for Struct_CLIENT {
    fn default() -> Struct_CLIENT { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_clnt_ops {
    pub cl_call: ::std::option::Option<extern "C" fn
                                           (arg1: *mut CLIENT, arg2: u_long,
                                            arg3: xdrproc_t, arg4: caddr_t,
                                            arg5: xdrproc_t, arg6: caddr_t,
                                            arg7: Struct_timeval)
                                           -> Enum_clnt_stat>,
    pub cl_abort: ::std::option::Option<extern "C" fn() -> ()>,
    pub cl_geterr: ::std::option::Option<extern "C" fn
                                             (arg1: *mut CLIENT,
                                              arg2: *mut Struct_rpc_err)
                                             -> ()>,
    pub cl_freeres: ::std::option::Option<extern "C" fn
                                              (arg1: *mut CLIENT,
                                               arg2: xdrproc_t, arg3: caddr_t)
                                              -> bool_t>,
    pub cl_destroy: ::std::option::Option<extern "C" fn(arg1: *mut CLIENT)
                                              -> ()>,
    pub cl_control: ::std::option::Option<extern "C" fn
                                              (arg1: *mut CLIENT,
                                               arg2: ::libc::c_int,
                                               arg3: *mut ::libc::c_char)
                                              -> bool_t>,
}
impl ::std::default::Default for Struct_clnt_ops {
    fn default() -> Struct_clnt_ops { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpc_createerr {
    pub cf_stat: Enum_clnt_stat,
    pub cf_error: Struct_rpc_err,
}
impl ::std::default::Default for Struct_rpc_createerr {
    fn default() -> Struct_rpc_createerr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_msg_type = ::libc::c_uint;
pub const CALL: ::libc::c_uint = 0;
pub const REPLY: ::libc::c_uint = 1;
pub type Enum_reply_stat = ::libc::c_uint;
pub const MSG_ACCEPTED: ::libc::c_uint = 0;
pub const MSG_DENIED: ::libc::c_uint = 1;
pub type Enum_accept_stat = ::libc::c_uint;
pub const SUCCESS: ::libc::c_uint = 0;
pub const PROG_UNAVAIL: ::libc::c_uint = 1;
pub const PROG_MISMATCH: ::libc::c_uint = 2;
pub const PROC_UNAVAIL: ::libc::c_uint = 3;
pub const GARBAGE_ARGS: ::libc::c_uint = 4;
pub const SYSTEM_ERR: ::libc::c_uint = 5;
pub type Enum_reject_stat = ::libc::c_uint;
pub const RPC_MISMATCH: ::libc::c_uint = 0;
pub const AUTH_ERROR: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_accepted_reply {
    pub ar_verf: Struct_opaque_auth,
    pub ar_stat: Enum_accept_stat,
    pub ru: Union_Unnamed57,
}
impl ::std::default::Default for Struct_accepted_reply {
    fn default() -> Struct_accepted_reply { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed57 {
    pub _bindgen_data_: [u64; 2us],
}
impl Union_Unnamed57 {
    pub unsafe fn AR_versions(&mut self) -> *mut Struct_Unnamed58 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn AR_results(&mut self) -> *mut Struct_Unnamed59 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed57 {
    fn default() -> Union_Unnamed57 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed58 {
    pub low: u_long,
    pub high: u_long,
}
impl ::std::default::Default for Struct_Unnamed58 {
    fn default() -> Struct_Unnamed58 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed59 {
    pub _where: caddr_t,
    pub _proc: xdrproc_t,
}
impl ::std::default::Default for Struct_Unnamed59 {
    fn default() -> Struct_Unnamed59 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rejected_reply {
    pub rj_stat: Enum_reject_stat,
    pub ru: Union_Unnamed60,
}
impl ::std::default::Default for Struct_rejected_reply {
    fn default() -> Struct_rejected_reply { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed60 {
    pub _bindgen_data_: [u64; 2us],
}
impl Union_Unnamed60 {
    pub unsafe fn RJ_versions(&mut self) -> *mut Struct_Unnamed61 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn RJ_why(&mut self) -> *mut Enum_auth_stat {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed60 {
    fn default() -> Union_Unnamed60 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed61 {
    pub low: u_long,
    pub high: u_long,
}
impl ::std::default::Default for Struct_Unnamed61 {
    fn default() -> Struct_Unnamed61 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_reply_body {
    pub rp_stat: Enum_reply_stat,
    pub ru: Union_Unnamed62,
}
impl ::std::default::Default for Struct_reply_body {
    fn default() -> Struct_reply_body { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed62 {
    pub _bindgen_data_: [u64; 6us],
}
impl Union_Unnamed62 {
    pub unsafe fn RP_ar(&mut self) -> *mut Struct_accepted_reply {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn RP_dr(&mut self) -> *mut Struct_rejected_reply {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed62 {
    fn default() -> Union_Unnamed62 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_call_body {
    pub cb_rpcvers: u_long,
    pub cb_prog: u_long,
    pub cb_vers: u_long,
    pub cb_proc: u_long,
    pub cb_cred: Struct_opaque_auth,
    pub cb_verf: Struct_opaque_auth,
}
impl ::std::default::Default for Struct_call_body {
    fn default() -> Struct_call_body { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpc_msg {
    pub rm_xid: u_long,
    pub rm_direction: Enum_msg_type,
    pub ru: Union_Unnamed63,
}
impl ::std::default::Default for Struct_rpc_msg {
    fn default() -> Struct_rpc_msg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed63 {
    pub _bindgen_data_: [u64; 10us],
}
impl Union_Unnamed63 {
    pub unsafe fn RM_cmb(&mut self) -> *mut Struct_call_body {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn RM_rmb(&mut self) -> *mut Struct_reply_body {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed63 {
    fn default() -> Union_Unnamed63 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_authunix_parms {
    pub aup_time: u_long,
    pub aup_machname: *mut ::libc::c_char,
    pub aup_uid: __uid_t,
    pub aup_gid: __gid_t,
    pub aup_len: u_int,
    pub aup_gids: *mut __gid_t,
}
impl ::std::default::Default for Struct_authunix_parms {
    fn default() -> Struct_authunix_parms { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_short_hand_verf {
    pub new_cred: Struct_opaque_auth,
}
impl ::std::default::Default for Struct_short_hand_verf {
    fn default() -> Struct_short_hand_verf { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_authdes_namekind = ::libc::c_uint;
pub const ADN_FULLNAME: ::libc::c_uint = 0;
pub const ADN_NICKNAME: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_authdes_fullname {
    pub name: *mut ::libc::c_char,
    pub key: des_block,
    pub window: uint32_t,
}
impl ::std::default::Default for Struct_authdes_fullname {
    fn default() -> Struct_authdes_fullname {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_authdes_cred {
    pub adc_namekind: Enum_authdes_namekind,
    pub adc_fullname: Struct_authdes_fullname,
    pub adc_nickname: uint32_t,
}
impl ::std::default::Default for Struct_authdes_cred {
    fn default() -> Struct_authdes_cred { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpc_timeval {
    pub tv_sec: uint32_t,
    pub tv_usec: uint32_t,
}
impl ::std::default::Default for Struct_rpc_timeval {
    fn default() -> Struct_rpc_timeval { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_authdes_verf {
    pub adv_time_u: Union_Unnamed64,
    pub adv_int_u: uint32_t,
}
impl ::std::default::Default for Struct_authdes_verf {
    fn default() -> Struct_authdes_verf { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed64 {
    pub _bindgen_data_: [u32; 2us],
}
impl Union_Unnamed64 {
    pub unsafe fn adv_ctime(&mut self) -> *mut Struct_rpc_timeval {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn adv_xtime(&mut self) -> *mut des_block {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed64 {
    fn default() -> Union_Unnamed64 { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_xprt_stat = ::libc::c_uint;
pub const XPRT_DIED: ::libc::c_uint = 0;
pub const XPRT_MOREREQS: ::libc::c_uint = 1;
pub const XPRT_IDLE: ::libc::c_uint = 2;
pub type SVCXPRT = Struct_SVCXPRT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_SVCXPRT {
    pub xp_sock: ::libc::c_int,
    pub xp_port: u_short,
    pub xp_ops: *const Struct_xp_ops,
    pub xp_addrlen: ::libc::c_int,
    pub xp_raddr: Struct_sockaddr_in,
    pub xp_verf: Struct_opaque_auth,
    pub xp_p1: caddr_t,
    pub xp_p2: caddr_t,
    pub xp_pad: [::libc::c_char; 256us],
}
impl ::std::default::Default for Struct_SVCXPRT {
    fn default() -> Struct_SVCXPRT { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xp_ops {
    pub xp_recv: ::std::option::Option<extern "C" fn
                                           (__xprt: *mut SVCXPRT,
                                            __msg: *mut Struct_rpc_msg)
                                           -> bool_t>,
    pub xp_stat: ::std::option::Option<extern "C" fn(__xprt: *mut SVCXPRT)
                                           -> Enum_xprt_stat>,
    pub xp_getargs: ::std::option::Option<extern "C" fn
                                              (__xprt: *mut SVCXPRT,
                                               __xdr_args: xdrproc_t,
                                               __args_ptr: caddr_t)
                                              -> bool_t>,
    pub xp_reply: ::std::option::Option<extern "C" fn
                                            (__xprt: *mut SVCXPRT,
                                             __msg: *mut Struct_rpc_msg)
                                            -> bool_t>,
    pub xp_freeargs: ::std::option::Option<extern "C" fn
                                               (__xprt: *mut SVCXPRT,
                                                __xdr_args: xdrproc_t,
                                                __args_ptr: caddr_t)
                                               -> bool_t>,
    pub xp_destroy: ::std::option::Option<extern "C" fn(__xprt: *mut SVCXPRT)
                                              -> ()>,
}
impl ::std::default::Default for Struct_xp_ops {
    fn default() -> Struct_xp_ops { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_svc_req {
    pub rq_prog: rpcprog_t,
    pub rq_vers: rpcvers_t,
    pub rq_proc: rpcproc_t,
    pub rq_cred: Struct_opaque_auth,
    pub rq_clntcred: caddr_t,
    pub rq_xprt: *mut SVCXPRT,
}
impl ::std::default::Default for Struct_svc_req {
    fn default() -> Struct_svc_req { unsafe { ::std::mem::zeroed() } }
}
pub type __dispatch_fn_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Struct_svc_req, arg2: *mut SVCXPRT)
                              -> ()>;
pub enum Struct_pollfd { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpcent {
    pub r_name: *mut ::libc::c_char,
    pub r_aliases: *mut *mut ::libc::c_char,
    pub r_number: ::libc::c_int,
}
impl ::std::default::Default for Struct_rpcent {
    fn default() -> Struct_rpcent { unsafe { ::std::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1us];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Struct___va_list_tag { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _sys_siglist: [*const ::libc::c_char; 65us];
    pub static mut sys_siglist: [*const ::libc::c_char; 65us];
    pub static in6addr_any: Struct_in6_addr;
    pub static in6addr_loopback: Struct_in6_addr;
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut _null_auth: Struct_opaque_auth;
    pub static mut rpc_createerr: Struct_rpc_createerr;
    pub static mut svc_pollfd: *mut Struct_pollfd;
    pub static mut svc_max_pollfd: ::libc::c_int;
    pub static mut svc_fdset: fd_set;
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(__nptr: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(__nptr: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(__nptr: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn strtod(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtof(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_float;
    pub fn strtold(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtol(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_long;
    pub fn strtoul(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoq(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtouq(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn strtoll(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoull(__nptr: *const ::libc::c_char,
                    __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn l64a(__n: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn a64l(__s: *const ::libc::c_char) -> ::libc::c_long;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn random() -> ::libc::c_long;
    pub fn srandom(__seed: ::libc::c_uint) -> ();
    pub fn initstate(__seed: ::libc::c_uint, __statebuf: *mut ::libc::c_char,
                     __statelen: size_t) -> *mut ::libc::c_char;
    pub fn setstate(__statebuf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::libc::c_int;
    pub fn srandom_r(__seed: ::libc::c_uint, __buf: *mut Struct_random_data)
     -> ::libc::c_int;
    pub fn initstate_r(__seed: ::libc::c_uint,
                       __statebuf: *mut ::libc::c_char, __statelen: size_t,
                       __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn setstate_r(__statebuf: *mut ::libc::c_char,
                      __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn rand() -> ::libc::c_int;
    pub fn srand(__seed: ::libc::c_uint) -> ();
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn drand48() -> ::libc::c_double;
    pub fn erand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn lrand48() -> ::libc::c_long;
    pub fn nrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn mrand48() -> ::libc::c_long;
    pub fn jrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn srand48(__seedval: ::libc::c_long) -> ();
    pub fn seed48(__seed16v: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn lcong48(__param: *mut ::libc::c_ushort) -> ();
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn erand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn jrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn srand48_r(__seedval: ::libc::c_long,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn seed48_r(__seed16v: *mut ::libc::c_ushort,
                    __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn lcong48_r(__param: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn malloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::libc::c_void;
    pub fn realloc(__ptr: *mut ::libc::c_void, __size: size_t)
     -> *mut ::libc::c_void;
    pub fn free(__ptr: *mut ::libc::c_void) -> ();
    pub fn cfree(__ptr: *mut ::libc::c_void) -> ();
    pub fn alloca(__size: size_t) -> *mut ::libc::c_void;
    pub fn valloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::libc::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::libc::c_int;
    pub fn abort() -> ();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<extern "C" fn
                                                 (__status: ::libc::c_int,
                                                  __arg: *mut ::libc::c_void)
                                                 -> ()>,
                   __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn exit(__status: ::libc::c_int) -> ();
    pub fn _Exit(__status: ::libc::c_int) -> ();
    pub fn getenv(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn putenv(__string: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn setenv(__name: *const ::libc::c_char,
                  __value: *const ::libc::c_char, __replace: ::libc::c_int)
     -> ::libc::c_int;
    pub fn unsetenv(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn clearenv() -> ::libc::c_int;
    pub fn mktemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(__template: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(__template: *mut ::libc::c_char,
                    __suffixlen: ::libc::c_int) -> ::libc::c_int;
    pub fn mkdtemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn system(__command: *const ::libc::c_char) -> ::libc::c_int;
    pub fn realpath(__name: *const ::libc::c_char,
                    __resolved: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn bsearch(__key: *const ::libc::c_void,
                   __base: *const ::libc::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn qsort(__base: *mut ::libc::c_void, __nmemb: size_t, __size: size_t,
                 __compar: __compar_fn_t) -> ();
    pub fn abs(__x: ::libc::c_int) -> ::libc::c_int;
    pub fn labs(__x: ::libc::c_long) -> ::libc::c_long;
    pub fn llabs(__x: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong)
     -> lldiv_t;
    pub fn ecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn fcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn qecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qfcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qgcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn fcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn qecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn qfcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn mblen(__s: *const ::libc::c_char, __n: size_t) -> ::libc::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::libc::c_char,
                  __n: size_t) -> ::libc::c_int;
    pub fn wctomb(__s: *mut ::libc::c_char, __wchar: wchar_t)
     -> ::libc::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::libc::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::libc::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::libc::c_char,
                     __tokens: *const *mut ::libc::c_char,
                     __valuep: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn getloadavg(__loadavg: *mut ::libc::c_double,
                      __nelem: ::libc::c_int) -> ::libc::c_int;
    pub fn gettimeofday(__tv: *mut Struct_timeval, __tz: __timezone_ptr_t)
     -> ::libc::c_int;
    pub fn settimeofday(__tv: *const Struct_timeval,
                        __tz: *const Struct_timezone) -> ::libc::c_int;
    pub fn adjtime(__delta: *const Struct_timeval,
                   __olddelta: *mut Struct_timeval) -> ::libc::c_int;
    pub fn getitimer(__which: __itimer_which_t,
                     __value: *mut Struct_itimerval) -> ::libc::c_int;
    pub fn setitimer(__which: __itimer_which_t,
                     __new: *const Struct_itimerval,
                     __old: *mut Struct_itimerval) -> ::libc::c_int;
    pub fn utimes(__file: *const ::libc::c_char, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn lutimes(__file: *const ::libc::c_char, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn futimes(__fd: ::libc::c_int, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn __sigismember(arg1: *const __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sysv_signal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn signal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn kill(__pid: __pid_t, __sig: ::libc::c_int) -> ::libc::c_int;
    pub fn killpg(__pgrp: __pid_t, __sig: ::libc::c_int) -> ::libc::c_int;
    pub fn raise(__sig: ::libc::c_int) -> ::libc::c_int;
    pub fn ssignal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn gsignal(__sig: ::libc::c_int) -> ::libc::c_int;
    pub fn psignal(__sig: ::libc::c_int, __s: *const ::libc::c_char) -> ();
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::libc::c_char)
     -> ();
    pub fn __sigpause(__sig_or_mask: ::libc::c_int, __is_sig: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigblock(__mask: ::libc::c_int) -> ::libc::c_int;
    pub fn sigsetmask(__mask: ::libc::c_int) -> ::libc::c_int;
    pub fn siggetmask() -> ::libc::c_int;
    pub fn sigemptyset(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigfillset(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigismember(__set: *const sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigprocmask(__how: ::libc::c_int, __set: *const sigset_t,
                       __oset: *mut sigset_t) -> ::libc::c_int;
    pub fn sigsuspend(__set: *const sigset_t) -> ::libc::c_int;
    pub fn sigaction(__sig: ::libc::c_int, __act: *const Struct_sigaction,
                     __oact: *mut Struct_sigaction) -> ::libc::c_int;
    pub fn sigpending(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigwait(__set: *const sigset_t, __sig: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t)
     -> ::libc::c_int;
    pub fn sigtimedwait(__set: *const sigset_t, __info: *mut siginfo_t,
                        __timeout: *const Struct_timespec) -> ::libc::c_int;
    pub fn sigqueue(__pid: __pid_t, __sig: ::libc::c_int, __val: Union_sigval)
     -> ::libc::c_int;
    pub fn sigvec(__sig: ::libc::c_int, __vec: *const Struct_sigvec,
                  __ovec: *mut Struct_sigvec) -> ::libc::c_int;
    pub fn sigreturn(__scp: *mut Struct_sigcontext) -> ::libc::c_int;
    pub fn siginterrupt(__sig: ::libc::c_int, __interrupt: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigstack(__ss: *mut Struct_sigstack, __oss: *mut Struct_sigstack)
     -> ::libc::c_int;
    pub fn sigaltstack(__ss: *const Struct_sigaltstack,
                       __oss: *mut Struct_sigaltstack) -> ::libc::c_int;
    pub fn pthread_sigmask(__how: ::libc::c_int, __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t) -> ::libc::c_int;
    pub fn pthread_kill(__threadid: pthread_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __libc_current_sigrtmin() -> ::libc::c_int;
    pub fn __libc_current_sigrtmax() -> ::libc::c_int;
    pub fn readv(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                 __count: ::libc::c_int) -> ssize_t;
    pub fn writev(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                  __count: ::libc::c_int) -> ssize_t;
    pub fn preadv(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                  __count: ::libc::c_int, __offset: __off_t) -> ssize_t;
    pub fn pwritev(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                   __count: ::libc::c_int, __offset: __off_t) -> ssize_t;
    pub fn __cmsg_nxthdr(__mhdr: *mut Struct_msghdr,
                         __cmsg: *mut Struct_cmsghdr) -> *mut Struct_cmsghdr;
    pub fn socket(__domain: ::libc::c_int, __type: ::libc::c_int,
                  __protocol: ::libc::c_int) -> ::libc::c_int;
    pub fn socketpair(__domain: ::libc::c_int, __type: ::libc::c_int,
                      __protocol: ::libc::c_int, __fds: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn bind(__fd: ::libc::c_int, __addr: *const Struct_sockaddr,
                __len: socklen_t) -> ::libc::c_int;
    pub fn getsockname(__fd: ::libc::c_int, __addr: *mut Struct_sockaddr,
                       __len: *mut socklen_t) -> ::libc::c_int;
    pub fn connect(__fd: ::libc::c_int, __addr: *const Struct_sockaddr,
                   __len: socklen_t) -> ::libc::c_int;
    pub fn getpeername(__fd: ::libc::c_int, __addr: *mut Struct_sockaddr,
                       __len: *mut socklen_t) -> ::libc::c_int;
    pub fn send(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                __n: size_t, __flags: ::libc::c_int) -> ssize_t;
    pub fn recv(__fd: ::libc::c_int, __buf: *mut ::libc::c_void, __n: size_t,
                __flags: ::libc::c_int) -> ssize_t;
    pub fn sendto(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                  __n: size_t, __flags: ::libc::c_int,
                  __addr: *const Struct_sockaddr, __addr_len: socklen_t)
     -> ssize_t;
    pub fn recvfrom(__fd: ::libc::c_int, __buf: *mut ::libc::c_void,
                    __n: size_t, __flags: ::libc::c_int,
                    __addr: *mut Struct_sockaddr, __addr_len: *mut socklen_t)
     -> ssize_t;
    pub fn sendmsg(__fd: ::libc::c_int, __message: *const Struct_msghdr,
                   __flags: ::libc::c_int) -> ssize_t;
    pub fn recvmsg(__fd: ::libc::c_int, __message: *mut Struct_msghdr,
                   __flags: ::libc::c_int) -> ssize_t;
    pub fn getsockopt(__fd: ::libc::c_int, __level: ::libc::c_int,
                      __optname: ::libc::c_int, __optval: *mut ::libc::c_void,
                      __optlen: *mut socklen_t) -> ::libc::c_int;
    pub fn setsockopt(__fd: ::libc::c_int, __level: ::libc::c_int,
                      __optname: ::libc::c_int,
                      __optval: *const ::libc::c_void, __optlen: socklen_t)
     -> ::libc::c_int;
    pub fn listen(__fd: ::libc::c_int, __n: ::libc::c_int) -> ::libc::c_int;
    pub fn accept(__fd: ::libc::c_int, __addr: *mut Struct_sockaddr,
                  __addr_len: *mut socklen_t) -> ::libc::c_int;
    pub fn shutdown(__fd: ::libc::c_int, __how: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sockatmark(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn isfdtype(__fd: ::libc::c_int, __fdtype: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ntohl(__netlong: uint32_t) -> uint32_t;
    pub fn ntohs(__netshort: uint16_t) -> uint16_t;
    pub fn htonl(__hostlong: uint32_t) -> uint32_t;
    pub fn htons(__hostshort: uint16_t) -> uint16_t;
    pub fn bindresvport(__sockfd: ::libc::c_int,
                        __sock_in: *mut Struct_sockaddr_in) -> ::libc::c_int;
    pub fn bindresvport6(__sockfd: ::libc::c_int,
                         __sock_in: *mut Struct_sockaddr_in6)
     -> ::libc::c_int;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn gets(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn xdr_void() -> bool_t;
    pub fn xdr_short(__xdrs: *mut XDR, __sp: *mut ::libc::c_short) -> bool_t;
    pub fn xdr_u_short(__xdrs: *mut XDR, __usp: *mut u_short) -> bool_t;
    pub fn xdr_int(__xdrs: *mut XDR, __ip: *mut ::libc::c_int) -> bool_t;
    pub fn xdr_u_int(__xdrs: *mut XDR, __up: *mut u_int) -> bool_t;
    pub fn xdr_long(__xdrs: *mut XDR, __lp: *mut ::libc::c_long) -> bool_t;
    pub fn xdr_u_long(__xdrs: *mut XDR, __ulp: *mut u_long) -> bool_t;
    pub fn xdr_hyper(__xdrs: *mut XDR, __llp: *mut quad_t) -> bool_t;
    pub fn xdr_u_hyper(__xdrs: *mut XDR, __ullp: *mut u_quad_t) -> bool_t;
    pub fn xdr_longlong_t(__xdrs: *mut XDR, __llp: *mut quad_t) -> bool_t;
    pub fn xdr_u_longlong_t(__xdrs: *mut XDR, __ullp: *mut u_quad_t)
     -> bool_t;
    pub fn xdr_int8_t(__xdrs: *mut XDR, __ip: *mut int8_t) -> bool_t;
    pub fn xdr_uint8_t(__xdrs: *mut XDR, __up: *mut uint8_t) -> bool_t;
    pub fn xdr_int16_t(__xdrs: *mut XDR, __ip: *mut int16_t) -> bool_t;
    pub fn xdr_uint16_t(__xdrs: *mut XDR, __up: *mut uint16_t) -> bool_t;
    pub fn xdr_int32_t(__xdrs: *mut XDR, __ip: *mut int32_t) -> bool_t;
    pub fn xdr_uint32_t(__xdrs: *mut XDR, __up: *mut uint32_t) -> bool_t;
    pub fn xdr_int64_t(__xdrs: *mut XDR, __ip: *mut int64_t) -> bool_t;
    pub fn xdr_uint64_t(__xdrs: *mut XDR, __up: *mut uint64_t) -> bool_t;
    pub fn xdr_quad_t(__xdrs: *mut XDR, __ip: *mut quad_t) -> bool_t;
    pub fn xdr_u_quad_t(__xdrs: *mut XDR, __up: *mut u_quad_t) -> bool_t;
    pub fn xdr_bool(__xdrs: *mut XDR, __bp: *mut bool_t) -> bool_t;
    pub fn xdr_enum(__xdrs: *mut XDR, __ep: *mut enum_t) -> bool_t;
    pub fn xdr_array(_xdrs: *mut XDR, __addrp: *mut caddr_t,
                     __sizep: *mut u_int, __maxsize: u_int, __elsize: u_int,
                     __elproc: xdrproc_t) -> bool_t;
    pub fn xdr_bytes(__xdrs: *mut XDR, __cpp: *mut *mut ::libc::c_char,
                     __sizep: *mut u_int, __maxsize: u_int) -> bool_t;
    pub fn xdr_opaque(__xdrs: *mut XDR, __cp: caddr_t, __cnt: u_int)
     -> bool_t;
    pub fn xdr_string(__xdrs: *mut XDR, __cpp: *mut *mut ::libc::c_char,
                      __maxsize: u_int) -> bool_t;
    pub fn xdr_union(__xdrs: *mut XDR, __dscmp: *mut enum_t,
                     __unp: *mut ::libc::c_char,
                     __choices: *const Struct_xdr_discrim,
                     __dfault: xdrproc_t) -> bool_t;
    pub fn xdr_char(__xdrs: *mut XDR, __cp: *mut ::libc::c_char) -> bool_t;
    pub fn xdr_u_char(__xdrs: *mut XDR, __cp: *mut u_char) -> bool_t;
    pub fn xdr_vector(__xdrs: *mut XDR, __basep: *mut ::libc::c_char,
                      __nelem: u_int, __elemsize: u_int,
                      __xdr_elem: xdrproc_t) -> bool_t;
    pub fn xdr_float(__xdrs: *mut XDR, __fp: *mut ::libc::c_float) -> bool_t;
    pub fn xdr_double(__xdrs: *mut XDR, __dp: *mut ::libc::c_double)
     -> bool_t;
    pub fn xdr_reference(__xdrs: *mut XDR, __xpp: *mut caddr_t, __size: u_int,
                         __proc: xdrproc_t) -> bool_t;
    pub fn xdr_pointer(__xdrs: *mut XDR, __objpp: *mut *mut ::libc::c_char,
                       __obj_size: u_int, __xdr_obj: xdrproc_t) -> bool_t;
    pub fn xdr_wrapstring(__xdrs: *mut XDR, __cpp: *mut *mut ::libc::c_char)
     -> bool_t;
    pub fn xdr_sizeof(arg1: xdrproc_t, arg2: *mut ::libc::c_void) -> u_long;
    pub fn xdr_netobj(__xdrs: *mut XDR, __np: *mut Struct_netobj) -> bool_t;
    pub fn xdrmem_create(__xdrs: *mut XDR, __addr: caddr_t, __size: u_int,
                         __xop: Enum_xdr_op) -> ();
    pub fn xdrstdio_create(__xdrs: *mut XDR, __file: *mut FILE,
                           __xop: Enum_xdr_op) -> ();
    pub fn xdrrec_create(__xdrs: *mut XDR, __sendsize: u_int,
                         __recvsize: u_int, __tcp_handle: caddr_t,
                         __readit:
                             ::std::option::Option<extern "C" fn
                                                       (arg1:
                                                            *mut ::libc::c_char,
                                                        arg2:
                                                            *mut ::libc::c_char,
                                                        arg3: ::libc::c_int)
                                                       -> ::libc::c_int>,
                         __writeit:
                             ::std::option::Option<extern "C" fn
                                                       (arg1:
                                                            *mut ::libc::c_char,
                                                        arg2:
                                                            *mut ::libc::c_char,
                                                        arg3: ::libc::c_int)
                                                       -> ::libc::c_int>)
     -> ();
    pub fn xdrrec_endofrecord(__xdrs: *mut XDR, __sendnow: bool_t) -> bool_t;
    pub fn xdrrec_skiprecord(__xdrs: *mut XDR) -> bool_t;
    pub fn xdrrec_eof(__xdrs: *mut XDR) -> bool_t;
    pub fn xdr_free(__proc: xdrproc_t, __objp: *mut ::libc::c_char) -> ();
    pub fn xdr_des_block(__xdrs: *mut XDR, __blkp: *mut des_block) -> bool_t;
    pub fn authunix_create(__machname: *mut ::libc::c_char, __uid: __uid_t,
                           __gid: __gid_t, __len: ::libc::c_int,
                           __aup_gids: *mut __gid_t) -> *mut AUTH;
    pub fn authunix_create_default() -> *mut AUTH;
    pub fn authnone_create() -> *mut AUTH;
    pub fn authdes_create(__servername: *const ::libc::c_char,
                          __window: u_int, __syncaddr: *mut Struct_sockaddr,
                          __ckey: *mut des_block) -> *mut AUTH;
    pub fn authdes_pk_create(arg1: *const ::libc::c_char, arg2: *mut netobj,
                             arg3: u_int, arg4: *mut Struct_sockaddr,
                             arg5: *mut des_block) -> *mut AUTH;
    pub fn getnetname(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn host2netname(arg1: *mut ::libc::c_char,
                        arg2: *const ::libc::c_char,
                        arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn user2netname(arg1: *mut ::libc::c_char, arg2: uid_t,
                        arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn netname2user(arg1: *const ::libc::c_char, arg2: *mut uid_t,
                        arg3: *mut gid_t, arg4: *mut ::libc::c_int,
                        arg5: *mut gid_t) -> ::libc::c_int;
    pub fn netname2host(arg1: *const ::libc::c_char,
                        arg2: *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn key_decryptsession(arg1: *mut ::libc::c_char, arg2: *mut des_block)
     -> ::libc::c_int;
    pub fn key_decryptsession_pk(arg1: *mut ::libc::c_char, arg2: *mut netobj,
                                 arg3: *mut des_block) -> ::libc::c_int;
    pub fn key_encryptsession(arg1: *mut ::libc::c_char, arg2: *mut des_block)
     -> ::libc::c_int;
    pub fn key_encryptsession_pk(arg1: *mut ::libc::c_char, arg2: *mut netobj,
                                 arg3: *mut des_block) -> ::libc::c_int;
    pub fn key_gendes(arg1: *mut des_block) -> ::libc::c_int;
    pub fn key_setsecret(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn key_secretkey_is_set() -> ::libc::c_int;
    pub fn key_get_conv(arg1: *mut ::libc::c_char, arg2: *mut des_block)
     -> ::libc::c_int;
    pub fn xdr_opaque_auth(arg1: *mut XDR, arg2: *mut Struct_opaque_auth)
     -> bool_t;
    pub fn memcpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                  __n: size_t) -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __n: size_t) -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __c: ::libc::c_int, __n: size_t) -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                  __n: size_t) -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                   __n: size_t) -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                     __l: __locale_t) -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strndup(__string: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn strchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strrchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcspn(__s: *const ::libc::c_char,
                   __reject: *const ::libc::c_char) -> size_t;
    pub fn strspn(__s: *const ::libc::c_char, __accept: *const ::libc::c_char)
     -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_char,
                   __accept: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strstr(__haystack: *const ::libc::c_char,
                  __needle: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strtok(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __strtok_r(__s: *mut ::libc::c_char,
                      __delim: *const ::libc::c_char,
                      __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok_r(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char,
                    __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strlen(__s: *const ::libc::c_char) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strerror_r(__errnum: ::libc::c_int, __buf: *mut ::libc::c_char,
                      __buflen: size_t) -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t)
     -> *mut ::libc::c_char;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void,
                 __n: size_t) -> ();
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                __n: size_t) -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_char,
                      __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_char,
                       __s2: *const ::libc::c_char, __n: size_t)
     -> ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_char,
                  __delim: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn __stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __stpncpy(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn stpncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn clntraw_create(__prog: u_long, __vers: u_long) -> *mut CLIENT;
    pub fn clnt_create(__host: *const ::libc::c_char, __prog: u_long,
                       __vers: u_long, __prot: *const ::libc::c_char)
     -> *mut CLIENT;
    pub fn clnttcp_create(__raddr: *mut Struct_sockaddr_in, __prog: u_long,
                          __version: u_long, __sockp: *mut ::libc::c_int,
                          __sendsz: u_int, __recvsz: u_int) -> *mut CLIENT;
    pub fn clntudp_create(__raddr: *mut Struct_sockaddr_in, __program: u_long,
                          __version: u_long, __wait_resend: Struct_timeval,
                          __sockp: *mut ::libc::c_int) -> *mut CLIENT;
    pub fn clntudp_bufcreate(__raddr: *mut Struct_sockaddr_in,
                             __program: u_long, __version: u_long,
                             __wait_resend: Struct_timeval,
                             __sockp: *mut ::libc::c_int, __sendsz: u_int,
                             __recvsz: u_int) -> *mut CLIENT;
    pub fn clntunix_create(__raddr: *mut Struct_sockaddr_un,
                           __program: u_long, __version: u_long,
                           __sockp: *mut ::libc::c_int, __sendsz: u_int,
                           __recvsz: u_int) -> *mut CLIENT;
    pub fn callrpc(__host: *const ::libc::c_char, __prognum: u_long,
                   __versnum: u_long, __procnum: u_long, __inproc: xdrproc_t,
                   __in: *const ::libc::c_char, __outproc: xdrproc_t,
                   __out: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn _rpc_dtablesize() -> ::libc::c_int;
    pub fn clnt_pcreateerror(__msg: *const ::libc::c_char) -> ();
    pub fn clnt_spcreateerror(__msg: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn clnt_perrno(__num: Enum_clnt_stat) -> ();
    pub fn clnt_perror(__clnt: *mut CLIENT, __msg: *const ::libc::c_char)
     -> ();
    pub fn clnt_sperror(__clnt: *mut CLIENT, __msg: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn clnt_sperrno(__num: Enum_clnt_stat) -> *mut ::libc::c_char;
    pub fn getrpcport(__host: *const ::libc::c_char, __prognum: u_long,
                      __versnum: u_long, __proto: u_int) -> ::libc::c_int;
    pub fn get_myaddress(arg1: *mut Struct_sockaddr_in) -> ();
    pub fn xdr_callmsg(__xdrs: *mut XDR, __cmsg: *mut Struct_rpc_msg)
     -> bool_t;
    pub fn xdr_callhdr(__xdrs: *mut XDR, __cmsg: *mut Struct_rpc_msg)
     -> bool_t;
    pub fn xdr_replymsg(__xdrs: *mut XDR, __rmsg: *mut Struct_rpc_msg)
     -> bool_t;
    pub fn _seterr_reply(__msg: *mut Struct_rpc_msg,
                         __error: *mut Struct_rpc_err) -> ();
    pub fn xdr_authunix_parms(__xdrs: *mut XDR,
                              __p: *mut Struct_authunix_parms) -> bool_t;
    pub fn authdes_getucred(__adc: *const Struct_authdes_cred,
                            __uid: *mut uid_t, __gid: *mut gid_t,
                            __grouplen: *mut ::libc::c_short,
                            __groups: *mut gid_t) -> ::libc::c_int;
    pub fn getpublickey(__name: *const ::libc::c_char,
                        __key: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn getsecretkey(__name: *const ::libc::c_char,
                        __key: *mut ::libc::c_char,
                        __passwd: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rtime(__addrp: *mut Struct_sockaddr_in,
                 __timep: *mut Struct_rpc_timeval,
                 __timeout: *mut Struct_rpc_timeval) -> ::libc::c_int;
    pub fn svc_register(__xprt: *mut SVCXPRT, __prog: rpcprog_t,
                        __vers: rpcvers_t, __dispatch: __dispatch_fn_t,
                        __protocol: rpcprot_t) -> bool_t;
    pub fn svc_unregister(__prog: rpcprog_t, __vers: rpcvers_t) -> ();
    pub fn xprt_register(__xprt: *mut SVCXPRT) -> ();
    pub fn xprt_unregister(__xprt: *mut SVCXPRT) -> ();
    pub fn svc_sendreply(__xprt: *mut SVCXPRT, __xdr_results: xdrproc_t,
                         __xdr_location: caddr_t) -> bool_t;
    pub fn svcerr_decode(__xprt: *mut SVCXPRT) -> ();
    pub fn svcerr_weakauth(__xprt: *mut SVCXPRT) -> ();
    pub fn svcerr_noproc(__xprt: *mut SVCXPRT) -> ();
    pub fn svcerr_progvers(__xprt: *mut SVCXPRT, __low_vers: rpcvers_t,
                           __high_vers: rpcvers_t) -> ();
    pub fn svcerr_auth(__xprt: *mut SVCXPRT, __why: Enum_auth_stat) -> ();
    pub fn svcerr_noprog(__xprt: *mut SVCXPRT) -> ();
    pub fn svcerr_systemerr(__xprt: *mut SVCXPRT) -> ();
    pub fn svc_getreq(__rdfds: ::libc::c_int) -> ();
    pub fn svc_getreq_common(__fd: ::libc::c_int) -> ();
    pub fn svc_getreqset(__readfds: *mut fd_set) -> ();
    pub fn svc_getreq_poll(arg1: *mut Struct_pollfd, arg2: ::libc::c_int)
     -> ();
    pub fn svc_exit() -> ();
    pub fn svc_run() -> ();
    pub fn svcraw_create() -> *mut SVCXPRT;
    pub fn svcudp_create(__sock: ::libc::c_int) -> *mut SVCXPRT;
    pub fn svcudp_bufcreate(__sock: ::libc::c_int, __sendsz: u_int,
                            __recvsz: u_int) -> *mut SVCXPRT;
    pub fn svctcp_create(__sock: ::libc::c_int, __sendsize: u_int,
                         __recvsize: u_int) -> *mut SVCXPRT;
    pub fn svcfd_create(__sock: ::libc::c_int, __sendsize: u_int,
                        __recvsize: u_int) -> *mut SVCXPRT;
    pub fn svcunix_create(__sock: ::libc::c_int, __sendsize: u_int,
                          __recvsize: u_int, __path: *mut ::libc::c_char)
     -> *mut SVCXPRT;
    pub fn _authenticate(__rqst: *mut Struct_svc_req,
                         __msg: *mut Struct_rpc_msg) -> Enum_auth_stat;
    pub fn setrpcent(__stayopen: ::libc::c_int) -> ();
    pub fn endrpcent() -> ();
    pub fn getrpcbyname(__name: *const ::libc::c_char) -> *mut Struct_rpcent;
    pub fn getrpcbynumber(__number: ::libc::c_int) -> *mut Struct_rpcent;
    pub fn getrpcent() -> *mut Struct_rpcent;
    pub fn getrpcbyname_r(__name: *const ::libc::c_char,
                          __result_buf: *mut Struct_rpcent,
                          __buffer: *mut ::libc::c_char, __buflen: size_t,
                          __result: *mut *mut Struct_rpcent) -> ::libc::c_int;
    pub fn getrpcbynumber_r(__number: ::libc::c_int,
                            __result_buf: *mut Struct_rpcent,
                            __buffer: *mut ::libc::c_char, __buflen: size_t,
                            __result: *mut *mut Struct_rpcent)
     -> ::libc::c_int;
    pub fn getrpcent_r(__result_buf: *mut Struct_rpcent,
                       __buffer: *mut ::libc::c_char, __buflen: size_t,
                       __result: *mut *mut Struct_rpcent) -> ::libc::c_int;
    pub fn __rpc_thread_svc_fdset() -> *mut fd_set;
    pub fn __rpc_thread_createerr() -> *mut Struct_rpc_createerr;
    pub fn __rpc_thread_svc_pollfd() -> *mut *mut Struct_pollfd;
    pub fn __rpc_thread_svc_max_pollfd() -> *mut ::libc::c_int;
}
